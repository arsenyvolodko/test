package lfu

import (
	"errors"
	"iter"
)

var ErrKeyNotFound = errors.New("key not found")

const DefaultCapacity = 5

// Cache
// O(capacity) memory
type Cache[K comparable, V any] interface {
	// Get returns the value of the key if the key exists in the cache,
	// otherwise, returns ErrKeyNotFound.
	//
	// O(1)
	Get(key K) (V, error)

	// Put updates the value of the key if present, or inserts the key if not already present.
	//
	// When the cache reaches its capacity, it should invalidate and remove the least frequently used key
	// before inserting a new item. For this problem, when there is a tie
	// (i.e., two or more keys with the same frequency), the least recently used key would be invalidated.
	//
	// O(1)
	Put(key K, value V)

	// All returns the iterator in descending order of frequency.
	// If two or more keys have the same frequency, the most recently used key will be listed first.
	//
	// O(capacity)
	All() iter.Seq2[K, V]

	// Size returns the cache size.
	//
	// O(1)
	Size() int

	// Capacity returns the cache capacity.
	//
	// O(1)
	Capacity() int

	// GetKeyFrequency returns the element's frequency if the key exists in the cache,
	// otherwise, returns ErrKeyNotFound.
	//
	// O(1)
	GetKeyFrequency(key K) (int, error)
}

// cacheImpl represents LFU cache implementation
type cacheImpl[K comparable, V any] struct {
	capacity        int
	size            int
	freqList        map[int]*LinkedListNode[*LinkedList[listElem[K, V]]]
	minFreq         int
	elementPosition map[K]*LinkedListNode[listElem[K, V]]
	freqListList    *LinkedList[*LinkedList[listElem[K, V]]]
}

type listElem[K comparable, V any] struct {
	key         K
	value       V
	numberOfUse int
}

// New initializes the cache with the given capacity.
// If no capacity is provided, the cache will use DefaultCapacity.
func New[K comparable, V any](capacity ...int) *cacheImpl[K, V] {
	n := new(cacheImpl[K, V])
	n.freqList = make(map[int]*LinkedListNode[*LinkedList[listElem[K, V]]])
	n.elementPosition = make(map[K]*LinkedListNode[listElem[K, V]])
	n.freqListList = NewLinkedList[*LinkedList[listElem[K, V]]]()

	if len(capacity) > 0 {
		if capacity[0] < 0 {
			panic("Capacity < 0")
		}
		n.capacity = capacity[0]
	} else {
		n.capacity = DefaultCapacity
	}

	n.minFreq = 0
	return n
}

func (l *cacheImpl[K, V]) createListIfNotExists(freq int) *LinkedListNode[*LinkedList[listElem[K, V]]] {
	_, exists := l.freqList[freq]
	if !exists {
		newListNode := NewLinkedListNode(NewLinkedList[listElem[K, V]]())
		l.freqList[freq] = newListNode
		l.insertFreqListNode(newListNode, freq)
	}
	return l.freqList[freq]
}

func (l *cacheImpl[K, V]) insertFreqListNode(newListNode *LinkedListNode[*LinkedList[listElem[K, V]]], freq int) {
	if l.freqListList.Size > 0 {
		if freq == 1 {
			l.freqListList.PushBack(newListNode)
		} else {
			l.freqListList.PushBefore(newListNode, l.freqList[freq-1])
		}
	} else {
		l.freqListList.PushFront(newListNode)
	}
}

func (l *cacheImpl[K, V]) PushFront(position *LinkedListNode[listElem[K, V]]) {
	prevCount := position.Data.numberOfUse
	list := l.createListIfNotExists(prevCount + 1)

	// Move the element to the new frequency list.
	prevFreqList := l.freqList[prevCount]
	prevFreqList.Data.Remove(position)
	list.Data.PushFront(position)

	position.Data.numberOfUse += 1
	l.updateMinFreq(prevCount, prevFreqList)
}

func (l *cacheImpl[K, V]) updateMinFreq(prevCount int, prevFreqList *LinkedListNode[*LinkedList[listElem[K, V]]]) {
	if l.minFreq == prevCount && prevFreqList.Data.Size == 0 {
		l.minFreq += 1
	}
	if prevFreqList.Data.Size == 0 {
		l.freqListList.Remove(prevFreqList)
		delete(l.freqList, prevCount)
	}
}

func (l *cacheImpl[K, V]) Get(key K) (V, error) {
	position, exists := l.elementPosition[key]
	if !exists {
		var zeroValue V
		return zeroValue, ErrKeyNotFound
	}
	l.PushFront(position)
	return position.Data.value, nil
}

func (l *cacheImpl[K, V]) removeLeastFreqElem() {
	k := l.freqList[l.minFreq].Data.PopFront()
	if l.freqList[l.minFreq].Data.Size == 0 {
		l.freqListList.Remove(l.freqList[l.minFreq])
		delete(l.freqList, l.minFreq)
	}
	delete(l.elementPosition, k.key)
	l.size -= 1
}

func (l *cacheImpl[K, V]) Put(key K, value V) {
	position, exists := l.elementPosition[key]
	if !exists {
		if l.size == l.capacity {
			l.removeLeastFreqElem()
		}
		l.minFreq = 1
		list := l.createListIfNotExists(1)
		position = NewLinkedListNode(listElem[K, V]{key, value, 1})
		list.Data.PushFront(position)
		l.elementPosition[key] = position
		l.size += 1
	} else {
		l.PushFront(position)
	}

	l.elementPosition[key].Data.value = value
}

func (l *cacheImpl[K, V]) All() iter.Seq2[K, V] {
	return func(yield func(K, V) bool) {
		for elem := range l.freqListList.All() {
			for listElem := range elem.All() {
				if !yield(listElem.key, listElem.value) {
					return
				}
			}
		}
	}
}

func (l *cacheImpl[K, V]) Size() int {
	return l.size
}

func (l *cacheImpl[K, V]) Capacity() int {
	return l.capacity
}

func (l *cacheImpl[K, V]) GetKeyFrequency(key K) (int, error) {
	position, exists := l.elementPosition[key]
	if !exists {
		return 0, ErrKeyNotFound
	}
	return position.Data.numberOfUse, nil
}
