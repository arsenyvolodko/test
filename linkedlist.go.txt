package lfu

import "iter"

type LinkedListNode[K any] struct {
	prev *LinkedListNode[K]
	next *LinkedListNode[K]
	Data K
}

func NewLinkedListNode[K any](key K) *LinkedListNode[K] {
	return &LinkedListNode[K]{nil, nil, key}
}

type LinkedList[K any] struct {
	head *LinkedListNode[K]
	tail *LinkedListNode[K]
	Size int
}

func NewLinkedList[K any]() *LinkedList[K] {
	var zeroValue K
	list := &LinkedList[K]{}
	list.tail = NewLinkedListNode(zeroValue)
	list.head = NewLinkedListNode(zeroValue)
	list.tail.prev = list.head
	list.head.next = list.tail
	return list
}

func (l *LinkedList[K]) InsertBetween(prev *LinkedListNode[K], next *LinkedListNode[K], node *LinkedListNode[K]) {
	node.prev = prev
	node.next = next
	prev.next = node
	next.prev = node
	l.Size++
}

func (l *LinkedList[K]) removeNode(node *LinkedListNode[K]) K {
	node.prev.next = node.next
	node.next.prev = node.prev
	l.Size--
	return node.Data
}

func (l *LinkedList[K]) PushBack(node *LinkedListNode[K]) {
	l.InsertBetween(l.tail.prev, l.tail, node)
}

func (l *LinkedList[K]) PopFront() K {
	return l.removeNode(l.tail.prev)
}

func (l *LinkedList[K]) PushFront(node *LinkedListNode[K]) {
	l.InsertBetween(l.head, l.head.next, node)
}

func (l *LinkedList[K]) Remove(node *LinkedListNode[K]) {
	l.removeNode(node)
}

func (l *LinkedList[K]) PushBefore(node *LinkedListNode[K], before *LinkedListNode[K]) {
	l.InsertBetween(before.prev, before, node)
}

func (l *LinkedList[K]) All() iter.Seq[K] {
	return func(yield func(K) bool) {
		elem := l.head.next
		for elem != l.tail {
			if !yield(elem.Data) {
				return
			}
			elem = elem.next
		}
	}
}
